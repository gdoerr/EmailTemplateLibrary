plugins {
    id 'org.ajoberstar.grgit' version '1.6.0'
    id 'java'
    id 'maven'
    id 'signing'
}

sourceCompatibility = '1.8'
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint"
}

repositories {
    mavenCentral()
}

dependencies {
    compile "org.jsoup:jsoup:1.9.2"
    compile "net.htmlparser.jericho:jericho-html:3.4"
    compile "net.sourceforge.cssparser:cssparser:0.9.20"
    compile "com.google.guava:guava:20.0"
}

group = 'ws.doerr.projects.emailtemplates'
version = "${version}"

javadoc {
    title = "${rootProject.name} - ${version}"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task extractGit {
    def grgit = org.ajoberstar.grgit.Grgit.open(project.rootDir)
}

//
// Configure the MANIFEST.MF
//
jar {
    manifest {
        attributes\
            'Project': "${rootProject.name}",
            'Build-By': System.getProperty('user.name'),
            'Build-Date': new Date(),
            'Build-JDK': System.getProperty('java.version'),
            'Build-Host': java.net.InetAddress.getLocalHost().getHostName(),
            'Build-Gradle': GradleVersion.current().toString(),
            'Repo': grgit.remote.list().getAt(0).url ?: '',
            'Version': version ?: '',
            'Branch': grgit.status().clean ? grgit.branch.getCurrent().name : 'DEVELOPMENT',
            'CommitId': grgit.status().clean ? grgit.head().id : 'DEVELOPMENT',
            'CommitDate': grgit.status().clean ? grgit.head().date : 'DEVELOPMENT',
            'License': 'MIT'
    }
}

jar.dependsOn extractGit

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.artifactId = 'EmailTemplateLibrary'
            pom.version = version

            pom.project {
                name 'emailtemplates'
                packaging 'jar'
                description 'EmailTemplateLibrary is a library for building and maintaining email templates'
                url 'http://gdoerr.github.io/CssInliner/'

               scm {
                   url 'scm:git@github.com:gdoerr/EmailTemplateLibrary.git'
                   connection 'scm:git@github.com:gdoerr/EmailTemplateLibrary.git'
                   developerConnection 'scm:git@github.com:gdoerr/EmailTemplateLibrary.git'
               }

               licenses {
                   license {
                       name 'MIT'
                       url 'https://opensource.org/licenses/MIT'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'gdoerr56'
                       name 'Greg Doerr'
                   }
               }
           }
        }
    }
}